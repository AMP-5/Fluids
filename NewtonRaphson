import math

kd = 0.00059
def Newton(f, dfdx,Re, x, eps):
    f_value = f(x,Re)
    iteration_counter = 0
    while abs(f_value) > eps and iteration_counter < 10000:
        try:
            x = x - float(f_value)/dfdx(x,Re)
        except ZeroDivisionError:
            print ("Error! - derivative zero for x = ", x)
            sys.exit(1)     # Abort with error

        f_value = f(x,Re)
        iteration_counter += 1

    # Here, either a solution is found, or too many iterations
    if abs(f_value) > eps:
        iteration_counter = -1
    return x, iteration_counter

def f(x,Re):
    return 1/(x**(1/2)) + 0.86858896*  math.log(kd /3.7 + ( 2.51/(Re * x**(1/2))))

def dfdx(x,Re):
    return  -1*(1/(2 * x**(3/2)) + (2.1801583/(Re*kd/3.7*x**(3/2)+2.51*x)))


i = 10000
while i < 90000:
  print(i)
  i += 10000
  solution, no_iterations = Newton(f, dfdx,Re=i, x=24/i, eps=1.0e-6)

  if no_iterations > 0:    # Solution found
    print ("Number of function calls: %d" % (1 + 2*no_iterations))
    print ("A solution is: %f" % (solution))
  else:
    print ("Solution not found!")  
